name: OCM
on:
  workflow_call:
    inputs:
      chartPath:
        required: true
        type: string
      componentName:
        required: true
        type: string
      componentConstructorFile:
        required: false
        type: string
        default: .ocm/component-constructor.yaml
      ocmRegistryUrl:
        type: string
        default: ghcr.io/platform-mesh

jobs:
  ocm:
    runs-on: ubuntu-latest
    steps:
      - name: Create Github App Token
        uses: actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e # v2
        id: app-token
        with:
          app-id: "1415820"
          private-key: ${{ secrets.PM_PUBLISHER_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
      - name: Setup yq@latest
        run: |
          if ! command -v yq &>/dev/null
          then
            mkdir -p /home/runner/.local/bin
            wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /home/runner/.local/bin/yq &&\
              chmod +x /home/runner/.local/bin/yq
          fi
      - name: Check out the repo
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
      - name: setup OCM CLI
        run: |
          REPO=${repo:=open-component-model/ocm}
          if [ -z "$version" -o "$version" == latest ]; then
            version="$(basename "$(curl -Ls -o /dev/null -w %{url_effective} https://github.com/$REPO/releases/latest)")"
            echo "Selecting latest version: $version"
          fi
          VERSION=${version#v}
          ARCHIVE_FILE="ocm-${VERSION}-linux-amd64.tar.gz"
          URL="https://github.com/$REPO/releases/download/v${VERSION}/$ARCHIVE_FILE"
          echo "Installing ocm-cli version $version from $REPO"
          curl -LsS -o ocm-cli.tgz "$URL"
          tar --overwrite -xvzf ocm-cli.tgz >/dev/null
          chmod a+x ocm
      - name: Prepare Template Variables
        run: |
          IMAGE_NAME=$(yq '.image.name' ${{ inputs.chartPath }}/values.yaml)
          APP_VERSION=$(yq '.appVersion' ${{ inputs.chartPath }}/Chart.yaml)
          CHART_NAME=$(yq '.name' ${{ inputs.chartPath }}/Chart.yaml)
          VERSION=$(yq '.version' ${{ inputs.chartPath }}/Chart.yaml)
          CHART_REPO=https://github.com/${{ github.repository }}
          ORG_REPO=$(echo "$IMAGE_NAME" | sed 's|ghcr.io/||')
          CHART_OCI_PATH=ghcr.io/${{ github.repository }}/$CHART_NAME
          IMAGE_REPO_SHA=$(gh api repos/$ORG_REPO/git/ref/tags/$APP_VERSION | jq -r '.object.sha')
          
          echo "IMAGE_REPO_SHA=$IMAGE_REPO_SHA" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
          echo "ORG_REPO=$ORG_REPO" >> $GITHUB_ENV
          echo "CHART_REPO=$CHART_REPO" >> $GITHUB_ENV
          echo "CHART_OCI_PATH=$CHART_OCI_PATH" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
      - name: Write Credentials file
        run: |
          cat <<EOF > $HOME/.ocmconfig
          type: generic.config.ocm.software/v1
          configurations:
            - type: credentials.config.ocm.software
              consumers:
                - identity:
                    type: OCIRegistry
                    scheme: https
                    hostname: ghcr.io
                    pathprefix: platform-mesh
                  credentials:
                    - type: Credentials
                      properties:
                        username: github
                        password: ${{ secrets.GITHUB_TOKEN }}
                - identity:
                    type: OCIRegistry
                    scheme: https
                    hostname: ghcr.io
                    pathprefix: openmfp
                  credentials:
                    - type: Credentials
                      properties:
                        username: github
                        password: ${{ secrets.OPENMFP_PUBLISHER_TOKEN }}
          EOF
      - name: create OCM ComponentArchive
        run: |
          ocm_ctf=.ocm/transport.ctf
          mkdir -p "$(dirname "$ocm_ctf")"
          ./ocm add components -c --templater=go --file "$ocm_ctf" ${{ inputs.componentConstructorFile }} -- \
            VERSION=${{ env.VERSION }} \
            APP_VERSION=${{ env.APP_VERSION}} \
            IMAGE_NAME=${{ env.IMAGE_NAME}} \
            COMMIT=${{ github.sha }} \
            IMAGE_REPO_SHA=${{ env.IMAGE_REPO_SHA }} \
            CHART_REPO=${{ env.CHART_REPO }} \
            COMPONENT_NAME=${{ inputs.componentName }} \
            CHART_OCI_PATH=${{ env.CHART_OCI_PATH }} \
            LOCAL_CHART_PATH=${{ inputs.chartPath }}
      - name: Transfer to OCM REPO
        run: ./ocm transfer ctf --overwrite .ocm/transport.ctf "${{ inputs.ocmRegistryUrl }}"